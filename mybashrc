# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# ====================================================================================================================================================================================
# Custom section starts from below
# ====================================================================================================================================================================================
export PATH=$PATH:$HOME/bin/fzf/bin # fzf
export PATH="$PATH:/opt/nvim/bin" # nvim
export PATH="$PATH:$HOME/bin/flutter/bin" # flutter
export PATH="$PATH:/opt/gradle/gradle-8.10/bin"
export ANDROID_HOME=$HOME/bin/Android/SDK/ # android
export DOTNET_ROOT=$HOME/.dotnet # dotnet
export PATH=$PATH:$DOTNET_ROOT:$DOTNET_ROOT/sdk/8.0.302/DotnetTools
export PATH=$PATH:/home/soham/.cargo/bin
export XDG_SESSION_TYPE=xcb
export XDG_DATA_DIRS="$XDG_DATA_DIRS:/var/lib/flatpak/exports/share:/home/soham/.local/share/flatpak/exports/share"

if type rg &> /dev/null; then
  export FZF_DEFAULT_COMMAND='rg --files --hidden /'
  export FZF_DEFAULT_OPTS='-m'
fi

fzf_explore_dir () {
    explored_files=$(fzf --preview='cat {}')
    filess="${explored_files//\\n/ }" # replaces \n with space
    
    if [ "$filess" != "" ]; then
        explored_dirs=$(dirname ${filess})
        dirss="${explored_dirs//\\n/ }"
        gtk-launch $1 ${dirss}
    fi
}

fzf_explore_file () {
    explored_files=$(fzf --preview='cat {}')
    filess="${explored_files//\\n/ }" # replaces \n with space
    
    if [ "$filess" != "" ]; then
        gtk-launch $1 ${filess}
    fi
}

# Set up fzf key bindings and fuzzy completion
eval "$(fzf --bash)"

bind '"\C-f":"fzf_explore_dir org.gnome.Nautilus\n"'
bind '"\C-g":"fzf_explore_dir org.gnome.Terminal\n"'
bind '"\C-t":"fzf_explore_file org.gnome.TextEditor\n"'
bind '"\C-b":"fzf_explore_file code\n"'
bind '"\C-y":"fzf_explore_file typora\n"'


export PYTHONSTARTUP="/home/soham/craftingtable/bin/prepyshell.py"

VENV_PATH="$HOME/craftingtable"

if [ -d "$VENV_PATH" ] && [ ! -d "$(pwd)/.venv" ]; then
    source "$VENV_PATH/bin/activate"
fi

if [ -d "$(pwd)/.venv" ]; then
    source "$(pwd)/.venv/bin/activate"
fi

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

alias testdjangoproject='coverage erase; coverage run manage.py test -v 3; coverage report; coverage html'
alias mypyreport='mypy --html-report mypy_report --config-file mypy.ini .'
alias gitclean='git clean -fdX'
alias generatekey="python3 -c 'import secrets; print(secrets.token_hex())'"
alias playnvim='NVIM_APPNAME=nvim_playground nvim'

# pnpm
export PNPM_HOME="/home/soham/.local/share/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end
